(define (nli li n)(vector-ref (list->vector li) n))
;;сейчас понял, что это /\ по факту встроенная list-ref
(define (derivative xs)
  (cond
    ((number? xs) 0)
    ((symbol? xs) 1)
    ((= (length xs) 1)
     (if
      (number? (car xs))
      '(+ 0 0)
      '(+ 1 0)))
    ;вот это вот /\ костыль, если я от него избавлюсь, весь код ниже полетит, так что исправить не смогу
    ((= (length xs) 2)
     (cond ((equal? (car xs) 'sin)
            (if
             (list? (nli xs 1))
             `(* ,(derivative (nli xs 1)) (cos ,(nli xs 1))) 
             `(cos ,(nli xs 1))))
           ((equal? (car xs) 'cos)
            (if (list? (nli xs 1))
                `(* ,(derivative (nli xs 1)) (- (sin ,(nli xs 1)))) 
                `(- (sin ,(nli xs 1)))))
           ((equal? (car xs) 'exp)
            (if (list? (nli xs 1))
                `(* ,(derivative (nli xs 1)) (exp ,(nli xs 1))) 
                `(exp ,(nli xs 1))))
           ((equal? (car xs) 'log)
            (if (list? (nli xs 1))
                `(* ,(derivative (nli xs 1)) (/ 1 ,(nli xs 1)))
                `(/ 1 ,(nli xs 1))))
           ((equal? (car xs) '-)
            `(* -1 ,(derivative (list (nli xs 1)))))
           (else (cons (car xs) (derivative (cdr xs))))))
    ((= (length xs) 3)
     (cond ((equal? (car xs) '+)
            (if
             (list? (nli xs 1))
             `(+ ,(derivative (nli xs 1)) ,(derivative (nli xs 2)))
             `(+ ,(derivative (list (nli xs 1))) ,(derivative (list (nli xs 2))))))
           ((equal? (car xs) '-)
            (if (list? (nli xs 2))
                `(- ,(derivative (nli xs 1)) ,(derivative (nli xs 2)))
                `(- ,(derivative (nli xs 1)) ,(derivative (list (nli xs 2))))))
           ((equal? (car xs) '*)
            (cond ((and (list? (nli xs 1)) (list? (nli xs 2)))
                   `(+ (* ,(derivative (nli xs 1)) ,(nli xs 2))
                       (* ,(nli xs 1) ,(derivative (nli xs 2)))))
                  ((list? (nli xs 2))
                   `(* ,(nli xs 1) ,(derivative (nli xs 2))))
                  ((number? (nli xs 1))
                   `(* ,(nli xs 1) ,(derivative (list (nli xs 2)))))
                  ((and (number? (nli xs 2))
                        (not (list? (nli xs 1))))
                   `(* ,(nli xs 2) ,(derivative  (list (nli xs 1)))))
                  ((number? (nli xs 2))
                   `(* ,(nli xs 2) ,(derivative  (nli xs 1))))
                  (else
                   `(+ (* ,(derivative (list (nli xs 1))) ,(nli xs 2))
                       (* ,(nli xs 1) ,(derivative (list (nli xs 2))))))))
           ((equal? (car xs) 'expt)
            (cond ((and (number? (nli xs 1))
                        (not (list? (nli xs 2))))
                   `(* (expt ,(nli xs 1) ,(nli xs 2)) (log ,(nli xs 1))))
                  ((and (number? (nli xs 2))
                        (not (equal? (nli xs 1) 'e)))
                   `(* ,(nli xs 2) (expt ,(nli xs 1) ,(- (nli xs 2) 1))))
                  ((and (list? (nli xs 2))
                        (equal? (nli xs 1) 'e))
                   `(* ,(derivative (nli xs 2)) (expt e ,(nli xs 2))))
                  ((and (list? (nli xs 2))
                        (not (equal? (nli xs 1) 'e)))
                   `(* ,(derivative (nli xs 2))
                       (expt ,(nli xs 1) ,(nli xs 2))
                       (log ,(nli xs 1))))
                  (else `(expt e ,(nli xs 2)))))
           ((equal? (car xs) '/)
            (if (list? (nli xs 2))
                `(/ (- (* ,(derivative (list (nli xs 1))) ,(nli xs 2))
                       (* ,(nli xs 1) ,(derivative (nli xs 2)))) (expt ,(nli xs 2) 2))
                `(/ (- (* ,(derivative (list (nli xs 1))) ,(nli xs 2))
                       (* ,(nli xs 1) ,(derivative (list (nli xs 2)))))
                    (expt ,(nli xs 2) 2))))))
    ((= (length xs) 4)
     (if
      (number? (cadr xs))
      `(* ,(nli xs 1) ,(derivative (cons '* (cddr xs))))
      (if
       (list? (cadr xs))
       `(+ (* ,(derivative (nli xs 1)) ,(cons '* (cdr (cdr xs))))
           (* ,(nli xs 1) ,(derivative (cons '* (cdr (cdr xs))))))
       `(+ (* ,(derivative (list (nli xs 1))) ,(cons '* (cdr (cdr xs)))) (* ,(nli xs 1)
                                      ,(derivative (cons '* (cdr (cdr xs)))))))))
    (else (if (list? (nli xs 1)) `(* ,(nli xs 1) ,(derivative (cons '* (cddr xs))))
              `(+ (* ,(derivative (list (nli xs 1))) ,@(cdr (cdr xs)))
                  (* ,(nli xs 1) ,(derivative (cons '* (cdr (cdr xs))))))))))
;;к сожалению, в начале не совсем правильно понял задание, поэтому много костылей
(define-syntax flatten
  (syntax-rules ()
    ((flatten expr ... ())(expr ...))
    ((flatten expr ... ((ininlist ...) inlist ...))
     (flatten expr ... (ininlist ... inlist ...)))
    ((flatten expr ... (first others ...))
     (flatten expr ... first (others ...)))))
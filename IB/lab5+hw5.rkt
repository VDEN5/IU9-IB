(define (inprogr? xs x) 
  (and (not (null? xs))
       (or (equal? x (car xs)) (inprogr? (cdr xs) x))))
(define (arithm? op)
  (cond ((or (equal? op '+) (equal? op '-)
             (equal? op '*)) op)
        ((equal? op 'mod) 'remainder)
        ((equal? op '/) 'dive)
        (else #f)))
(define (dive a b)
  (/ (- a (remainder a b)) b))
(define (endif-pos1 program n)
  (if (< n (vector-length program))
      (if (equal? (vector-ref program n) 'endif)
          n
          (endif-pos1 program (+ n 1))) #f))
(define (else-pos program n)
  (if (< n (vector-length program))
      (if (equal? (vector-ref program n) 'else)
          n
          (else-pos program (+ n 1))) #f))
(define (endif-pos program n)
  (endi-pos program n 0 0))
(define (endi-pos program n k i)
  (if
   (and (= k 0)(> i 0))
   (- n 1)
   (if (< n (vector-length program)) 
       (if (equal? (vector-ref program n) 'if)
           (endi-pos program (+ n 1) (- k 1)(+ i 1))
           (if (equal? (vector-ref program n) 'endif)
               (endi-pos program (+ n 1) (+ k 1) (+ i 1))
               (endi-pos program (+ n 1) k (+ i 1)))) #f)))
(define (comp-flag op stack)
  (cond
    ((or (and (equal? op '<)(< (cadr stack) (car stack)))
         (and (equal? op '>)(> (cadr stack) (car stack)))) -1)
    ((and (equal? op '=)(= (cadr stack) (car stack))) -1)
    (else 0)))
(define (end-pos program n)
  (if (< n (vector-length program))
      (if (equal? (vector-ref program n) 'end)
          n
          (end-pos program (+ n 1))) #f))
(define (wend-pos program n)
  (if (equal? (vector-ref program n) 'wend)
      n
      (wend-pos program (+ n 1))))
(define (comp? op) (and (or (equal? op '<)
                            (equal? op '=)
                            (equal? op '>)) op))
(define (replace n stack)
  (set! stack (cons n (cddr stack))) stack)
(define (skipiterscontinue program n)
  (if (or (equal? (vector-ref program n) 'wend)
          (equal? (vector-ref program n) 'next)
          (equal? (vector-ref program n) 'until))
      n
      (skipiterscontinue program (+ n 1))))
;;непосредственно интерпретатор
(define (interpret program stack)
  (define (scanner program n nstack backstack functions)
    (if (= n (vector-length program))
        nstack
        (let ((word (vector-ref program n)))
          (cond
            ((number? word) (scanner program (+ n 1)
                                     (cons word nstack) backstack functions))
            ((arithm? word) (scanner program (+ n 1)
                                     (replace (eval (list (arithm? word)
          (cadr nstack) (car nstack)) (interaction-environment)) nstack)
                                     backstack functions))
            ((comp? word) (scanner program (+ n 1)
                                   (replace (comp-flag (comp? word) nstack) nstack) backstack functions))
            ((equal? word 'neg)
             (scanner program (+ n 1)
                      (cons (* -1 (car nstack)) (cdr nstack)) backstack functions))
            ((equal? word 'not) (scanner program (+ n 1)
         (cons (if (= (car nstack) 0) -1 0) (cdr nstack)) backstack functions))
            ((equal? word 'and) (scanner program (+ n 1)
                                         (if (or (= (cadr nstack) 0)
                                                 (= (car nstack) 0))
                                             (cons 0 (cddr nstack))
                                             (cons -1 (cddr nstack)))
                                         backstack functions))
            ((equal? word 'or) (scanner program (+ n 1)
                                        (if (and (= (cadr nstack) 0) (= (car nstack) 0))
                                            (cons 0 (cddr nstack))
                                            (cons -1 (cddr nstack)))
                                        backstack functions))
            ((equal? word 'drop) (scanner program (+ n 1)
                                          (cdr nstack) backstack functions))
            ((equal? word 'swap) (scanner program
                                          (+ n 1) (append (list (cadr nstack)
                                                                (car nstack)) (cddr nstack))
                                          backstack functions))
            ((equal? word 'dup) (scanner program (+ n 1)
                                         (cons (car nstack) nstack)
                                         backstack functions))
            ((equal? word 'over) (scanner program (+ n 1) (cons (cadr nstack) nstack)
                                          backstack functions))
            ((equal? word 'rot) (scanner program (+ n 1)
                                         (append (list (caddr nstack) (cadr nstack)
                                                       (car nstack)) (cdddr nstack))
                                         backstack functions))
            ((equal? word 'depth) (scanner program (+ n 1)
                                           (cons (length nstack) nstack) backstack functions))
            ((equal? word 'define)
             (scanner program (+ (end-pos program n) 1) nstack
                      (cons (list (vector-ref program (+ n 1)) (+ n 2)) backstack)
                      functions))
            ((inprogr? '(exit end) word)
             (scanner program (car functions) nstack backstack (cdr functions)))
            ((equal? word 'if)
             (if
              (else-pos program n)
              (scanner program
                       (if (zero? (car nstack))
                           (+ (else-pos program n) 1)
                           (+ n 1))
                       (cdr nstack)
                       backstack functions)
              (scanner program (if (zero? (car nstack))
                                   (+ (endif-pos program n) 1)
                                   (+ n 1))
                       (cdr nstack) backstack functions)))
            ((equal? word 'else)
             (if (zero? (car nstack))
                 (scanner program (+ n 1) (cdr nstack) backstack functions)
                 (scanner program
                          (+ (endif-pos1 program n) 1) nstack backstack functions)))
            ((equal? word 'endif) (scanner program (+ n 1) nstack backstack functions))
            ((equal? word 'while) (if (zero? (car nstack))
                      (scanner program (+ (wend-pos program n) 1) (cdr nstack) backstack functions)
                      (scanner program (+ n 1) (cdr nstack) backstack (cons n functions))))
            ((equal? word 'wend) (scanner program (car functions) nstack backstack (cdr functions)))
            ((equal? word 'repeat) (scanner program (+ n 1) nstack backstack (cons n functions)))
            ((equal? word 'until)
             (scanner program
                      (if
                       (zero? (car nstack))
                       (car functions)
                       (+ n 1)) (cdr nstack) backstack (cdr functions)))
            ((equal? word 'for)
             (scanner program (+ n 1) (cddr nstack) backstack
                      (append (list (cadr nstack)) (list(car nstack)) (list (+ n 1)) functions)))
            ((equal? word 'i) (scanner program (+ n 1)
                                       (cons (car functions) nstack) backstack functions))
            ((equal? word 'next) (if (< (car functions) (cadr functions))
                                     (scanner program (caddr functions) nstack backstack
                                              (cons (+ (car functions) 1) (cdr functions)))
                                     (scanner program (+ n 1) nstack backstack (cdddr functions))))
            ((equal? word 'break) (scanner program (+ (skipiterscontinue program n) 1) nstack backstack
                (if (equal?(vector-ref program (skipiterscontinue program n)) 'next)
                                               (cdddr functions)
                                               (cdr functions))))
            ((equal? word 'continue)
             (scanner program (skipiterscontinue program n) nstack backstack functions))
            ((equal? word 'tail)
             (scanner program (cadr(assoc (vector-ref program (+ n 1)) backstack))
                      nstack backstack functions))
            (else (scanner program
                           (cadr (assoc word backstack)) nstack backstack (cons (+ n 1) functions)))))))
  (scanner program 0 stack '() '()))
(define feature-if-else #t)
(define feature-while-loop #t)
(define feature-repeat-loop #t)
(define feature-for-loop #t)
(define feature-tail-call #t)
(define feature-break-continue #t)
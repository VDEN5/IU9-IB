(define (day-of-week d m y)
  (define r1 (* 1461 (quotient y 4)))
  (define r2 (+ 366 (* 365 (remainder (- y 1) 4))))
  (if (= (remainder y 4) 0)
      (cond ((= m 1) (remainder (+ d r1 -3) 7))
            ((= m 2) (remainder (+ d r1 28) 7))
            ((= m 3) (remainder (+ d r1 57) 7))
            ((= m 4) (remainder (+ d r1 88) 7))
            ((= m 5) (remainder (+ d r1 118) 7))
            ((= m 6) (remainder (+ d r1 149) 7))
            ((= m 7) (remainder (+ d r1 179) 7))
            ((= m 8) (remainder (+ d r1 210) 7))
            ((= m 9) (remainder (+ d r1 241) 7))
            ((= m 10) (remainder (+ d r1 271) 7))
            ((= m 11) (remainder (+ d r1 302) 7))
            ((= m 12) (remainder (+ d r1 332) 7)))
      (cond ((= m 1) (remainder (+ r1 d r2 -3) 7))
            ((= m 2) (remainder (+ r1 d r2 31 -3) 7))
            ((= m 3) (remainder (+ d r1 r2 59 -3) 7))
            ((= m 4) (remainder (+ d r2 r1 90 -3) 7))
            ((= m 5) (remainder (+ d r2 r1 120 -3) 7))
            ((= m 6) (remainder (+ d r2 r1 148) 7))
            ((= m 7) (remainder (+ d r2 r1 178) 7))
            ((= m 8) (remainder (+ d r2 r1 209) 7))
            ((= m 9) (remainder (+ d r2 r1 240) 7))
            ((= m 10) (remainder (+ d r2 r1 270) 7))
            ((= m 11) (remainder (+ d r2 r1 301) 7))
            ((= m 12) (remainder (+ d r2 r1 331) 7)))))
(define (d a b c)(- (* b b) (* 4 a c)))
(define (solve-equation a b c)
  (cond ((and (= a 0) (= b 0))(list))
        ((and (= a 0) (not (= b 0)))(list (/ (* -1 c) b)))
        ((< (d a b c) 0) (list))
        ((= (d a b c) 0) (list (* -1 (/ b (* a 2)))))
        (else (list (/ (+ (* -1 b) (sqrt (d a b c))) (* a 2)) (/ (- (* -1 b) (sqrt (d a b c))) (* a 2))))))
(define (absr a)
  (if (> a 0)
      a
      (* -1 a)))
(define
  (my-gcd a1 b1)
  (begin
    (define a (absr a1))
    (define b (absr b1))
    (cond ((= a b) a)
        ((> a b)
         (my-gcd (- a b) b))
        (else
         (my-gcd a (- b a))))))
(define (my-lcm a b)
  (/ (* a b) (my-gcd a b)))
(define (fact a)
  (if (= a 0) 1
      (* a (fact (- a 1)))))
(define (prime? a)
  (=
   (remainder
    (+ 1 (fact (- a 1)))
    a)
   0))
(define (count x xs)
  (define (vstr x1 xs1 k)
    (if (= (length xs1) 0) k
        (if (equal? (car xs1) x1) (vstr x1 (cdr xs1) (+ k 1))
            (vstr x1 (cdr xs1) k))))
  (vstr x xs 0))
(define (delete pred? xs)
  (define (f pr xs1 xs2)
    (if (= (length xs1) 0) (reverse xs2)
        (if (pr (car xs1)) (f pr (cdr xs1) xs2)
            (f pr (cdr xs1) (cons (car xs1) xs2)))))
  (f pred? xs '()))
(define (iterate f x n)
  (define (w f1 x1 n1 list1)
    (if (= n1 n) (reverse list1)
        (w f1 (f1 x1) (+ n1 1) (cons x1 list1))))
  (w f x 0 '()))
(define (intersperse e xs)
  (define (in e1 xs1 xs2)
    (if (= (length xs1) 1) (append xs1 xs2)
        (cons (car xs1) (cons e1 (in e1 (cdr xs1) xs2) ))))
  (in e xs '()))
(define (any? pred xs)
  (define (g pre xs1 k)
    (if (= (length xs1) 0)
        k
        (if (pre (car xs1))
            (g pre (cdr xs1) (+ k 1))
            (g pre (cdr xs1) k))))
  (and (> (g pred xs 0) 0)))
(define (all? pred xs)
  (define (g pre xs1 k) (if (= (length xs1) 0) k
    (if (pre (car xs1)) (g pre (cdr xs1) (+ k 1)) (g pre (cdr xs1) k))))
  (and (= (g pred xs 0) (length xs))))
(define (o1 lis y)
  (if (= (length lis) 0) y
      (o1 (reverse (cdr (reverse lis))) ((car (reverse lis)) y))))
(define (o . fs)
  (lambda (x) (o1 fs x)))